func1 <- 'NumericMatrix mmult1(NumericMatrix a, NumericMatrix b) {
int acoln = a.ncol();
int bcoln = b.ncol();
NumericMatrix out = no_init_matrix(a.nrow(), acoln + bcoln);
for (int j = 0; j < acoln + bcoln; j++) {
if (j < acoln) {
out(_, j) = a(_, j);
} else {
out(_, j) = b(_, j - acoln);
}
}
return out;
}'
require(Rcpp)
cppFunction('IntegerVector which_maxCpp2(NumericVector v) {
double m = Rcpp::max(v);
std::vector< int > res;
int i;
for( i = 0; i < v.size(); ++i) {
if( v[i] == m ) {
res.push_back( i );
}
}
Rcpp::IntegerVector iv( res.begin(), res.end() );
return iv;
}')
which_maxCpp(v)
cppFunction('IntegerVector which_maxCpp2(NumericVector v) {
double m = Rcpp::max(v);
std::vector< int > res;
int i;
for( i = 0; i < v.size(); ++i) {
if( v[i] == m ) {
res.push_back( i );
}
}
Rcpp::IntegerVector iv( res.begin(), res.end() );
return iv;
}')
which_maxCpp2(v)
v = c(1,2,3,1,2,3)
which_maxCpp2(v)
cppFunction('IntegerVector which_maxCpp2(NumericVector v) {
double m = Rcpp::max(v);
std::vector< int > res;
int i;
for( i = 0; i < v.size(); ++i) {
if( v[i] == m ) {
res.push_back( i );
}
}
Rcpp::IntegerVector iv( res.begin(), res.end() );
return iv;
}')
v = c(1,2,3,1,2,3)
which_maxCpp2(v)
cppFunction('NumericMatrix mmult1(NumericMatrix a, NumericMatrix b) {
int acoln = a.ncol();
int bcoln = b.ncol();
NumericMatrix out = no_init_matrix(a.nrow(), acoln + bcoln);
for (int j = 0; j < acoln + bcoln; j++) {
if (j < acoln) {
out(_, j) = a(_, j);
} else {
out(_, j) = b(_, j - acoln);
}
}
return out;
}')
set.seed(42)
cppFunction(func1)
cppFunction(func1)
cppFunction(func1)
func1 <- 'NumericMatrix mmult1(NumericMatrix a, NumericMatrix b) {
int acoln = a.ncol();
int bcoln = b.ncol();
NumericMatrix out = no_init_matrix(a.nrow(), acoln + bcoln);
for (int j = 0; j < acoln + bcoln; j++) {
if (j < acoln) {
out(_, j) = a(_, j);
} else {
out(_, j) = b(_, j - acoln);
}
}
return out;
}'
cppFunction(func1)
set.seed(42)
a <- matrix(rnorm(1e7), 1e3)
b <- matrix(runif(1e7), 1e3)
identical(mmult(a, b), mmult1(a, b))
func1 <- 'NumericMatrix mmult1(NumericMatrix a, NumericMatrix b) {
int acoln = a.ncol();
int bcoln = b.ncol();
NumericMatrix out = no_init_matrix(a.nrow(), acoln + bcoln);
for (int j = 0; j < acoln + bcoln; j++) {
if (j < acoln) {
out(_, j) = a(_, j);
} else {
out(_, j) = b(_, j - acoln);
}
}
return out;
}'
identical(mmult(a, b), mmult1(a, b))
cppFunction(func1)
identical(mmult(a, b), mmult1(a, b))
require(Rcpp)
cppFunction('NumericMatrix mmult1(NumericMatrix a, NumericMatrix b) {
int acoln = a.ncol();
int bcoln = b.ncol();
NumericMatrix out = no_init_matrix(a.nrow(), acoln + bcoln);
for (int j = 0; j < acoln + bcoln; j++) {
if (j < acoln) {
out(_, j) = a(_, j);
} else {
out(_, j) = b(_, j - acoln);
}
}
return out;
}')
set.seed(42)
a <- matrix(rnorm(1e7), 1e3)
b <- matrix(runif(1e7), 1e3)
identical(mmult(a, b), mmult1(a, b))
identical(mmult1(a, b), mmult1(a, b))
cppFunction('NumericMatrix mmult(const NumericMatrix& m1, const NumericMatrix& m2){
if (m1.ncol() != m2.nrow()) stop ("Incompatible matrix dimensions");
NumericMatrix out(m1.nrow(),m2.ncol());
NumericVector rm1, cm2;
for (size_t i = 0; i < m1.nrow(); ++i) {
rm1 = m1(i,_);
for (size_t j = 0; j < m2.ncol(); ++j) {
cm2 = m2(_,j);
out(i,j) = std::inner_product(rm1.begin(), rm1.end(), cm2.begin(), 0.);
}
}
return out;
}')
A <- matrix(c(1:6),ncol=2)
B <- matrix(c(0:7),nrow=2)
mmult(A,B)
cppFunction('IntegerVector which_minCpp1(NumericVector v) {
double m = Rcpp::max(v);
Rcpp::IntegerVector res( v.size() );  // pre-allocate result vector
int i;
int counter = 0;
for( i = 0; i > v.size(); ++i) {
if( v[i] == m ) {
res[ counter ] = i;
counter++;
}
}
counter--;
Rcpp::Range rng(0, counter);
return res[rng];
}')
require(Rcpp)
cppFunction('IntegerVector which_minCpp1(NumericVector v) {
double m = Rcpp::max(v);
Rcpp::IntegerVector res( v.size() );  // pre-allocate result vector
int i;
int counter = 0;
for( i = 0; i > v.size(); ++i) {
if( v[i] == m ) {
res[ counter ] = i;
counter++;
}
}
counter--;
Rcpp::Range rng(0, counter);
return res[rng];
}')
v = c(1,2,3,1,2,3)
which_minCpp1(v)
cppFunction('IntegerVector which_minCpp1(NumericVector v) {
double m = Rcpp::max(v);
Rcpp::IntegerVector res( v.size() );  // pre-allocate result vector
int i;
int counter = 0;
for( i = 0; i < v.size(); ++i) {
if( v[i] == m ) {
res[ counter ] = i;
counter++;
}
}
counter--;
Rcpp::Range rng(0, counter);
return res[rng];
}')
which_minCpp1(v)
cppFunction('IntegerVector which_minCpp1(NumericVector v) {
double m = Rcpp::min(v);
Rcpp::IntegerVector res( v.size() );  // pre-allocate result vector
int i;
int counter = 0;
for( i = 0; i < v.size(); ++i) {
if( v[i] == m ) {
res[ counter ] = i;
counter++;
}
}
counter--;
Rcpp::Range rng(0, counter);
return res[rng];
}')
which_minCpp1(v)
help(lm)
require(Rcpp)
cppFunction('IntegerVector which_minCpp(NumericVector v) {
double m = Rcpp::min(v);
Rcpp::IntegerVector res( v.size() );
int i;
int contador = 0;
for( i = 0; i < v.size(); ++i) {
if( v[i] == m ) {
res[ contador ] = i;
contador++;
}
}
contador--;
Rcpp::Range rng(0, counter);
return res[rng];
}')
v = c(1,2,3,1,2,3)
which_minCpp(v)
cppFunction('IntegerVector which_minCpp(NumericVector v) {
double m = Rcpp::min(v);
Rcpp::IntegerVector res( v.size() );
int i;
int contador = 0;
for( i = 0; i < v.size(); ++i) {
if( v[i] == m ) {
res[ contador ] = i;
contador++;
}
}
contador--;
Rcpp::Range rng(0, counter);
return res[rng];
}')
which_minCpp(v)
cppFunction('IntegerVector which_minCpp1(NumericVector v) {
double m = Rcpp::min(v);
Rcpp::IntegerVector res( v.size() );
int i;
int contador = 0;
for( i = 0; i < v.size(); ++i) {
if( v[i] == m ) {
res[ contador ] = i;
contador++;
}
}
contador--;
Rcpp::Range rng(0, counter);
return res[rng];
}')
require(Rcpp)
cppFunction('NumericMatrix mmult1(NumericMatrix a, NumericMatrix b) {
int acoln = a.ncol();
int bcoln = b.ncol();
NumericMatrix out = no_init_matrix(a.nrow(), acoln + bcoln);
for (int j = 0; j < acoln + bcoln; j++) {
if (j < acoln) {
out(_, j) = a(_, j);
} else {
out(_, j) = b(_, j - acoln);
}
}
return out;
}')
?hello
require(Rcpp)
cppFunction<-('NumericMatrix mmult1(NumericMatrix a, NumericMatrix b) {
int arow = a.nrow();
int brow = b.nrow();
NumericMatrix out = no_init_matrix(a.ncol(), arow + brow);
for (int j = 0; j < arow + brow; j++) {
if (j < arow) {
out(_, j) = a(_, j);
} else {
out(_, j) = b(_, j - arow);
}
}
return out;
}')
A <- matrix(c(1:6),ncol=2)
B <- matrix(c(0:7),nrow=2)
mmult(A,B)
mmult1(A,B)
cppFunction<-('NumericMatrix mmult1(NumericMatrix a, NumericMatrix b) {
int arow = a.nrow();
int brow = b.nrow();
NumericMatrix out = no_init_matrix(a.ncol(), arow + brow);
for (int j = 0; j < arow + brow; j++) {
if (j < arow) {
out(_, j) = a(_, j);
} else {
out(_, j) = b(_, j - arow);
}
}
return out;
}')
mmult1(A,B)
require(Rcpp)
cppFunction<-('NumericMatrix mmult2(NumericMatrix a, NumericMatrix b) {
int arow = a.nrow();
int brow = b.nrow();
NumericMatrix out = no_init_matrix(a.ncol(), arow + brow);
for (int j = 0; j < arow + brow; j++) {
if (j < arow) {
out(_, j) = a(_, j);
} else {
out(_, j) = b(_, j - arow);
}
}
return out;
}')
A <- matrix(c(1:6),ncol=2)
B <- matrix(c(0:7),nrow=2)
mmult2(A,B)
set.seed(42)
a <- matrix(rnorm(1e7), 1e3)
b <- matrix(runif(1e7), 1e3)
require(Rcpp)
cppFunction<-('NumericMatrix mmult2(NumericMatrix a, NumericMatrix b) {
int arow = a.nrow();
int brow = b.nrow();
NumericMatrix out = no_init_matrix(a.ncol(), arow + brow);
for (int j = 0; j < arow + brow; j++) {
if (j < arow) {
out(_, j) = a(_, j);
} else {
out(_, j) = b(_, j - arow);
}
}
return out;
}')
set.seed(42)
a <- matrix(rnorm(1e7), 1e3)
b <- matrix(runif(1e7), 1e3)
identical(mmult2(a, b), mmult2(a, b))
cppFunction<-('NumericMatrix mmult1(NumericMatrix a, NumericMatrix b) {
int arow = a.nrow();
int brow = b.nrow();
NumericMatrix out = no_init_matrix(a.ncol(), arow + brow);
for (int j = 0; j < arow + brow; j++) {
if (j < arow) {
out(_, j) = a(_, j);
} else {
out(_, j) = b(_, j - arow);
}
}
return out;
}')
identical(mmult1(a, b), mmult1(a, b))
require(Rcpp)
identical(mmult1(a, b), mmult1(a, b))
require(Rcpp)
cppFunction('NumericMatrix mmult1(NumericMatrix a, NumericMatrix b) {
int acoln = a.ncol();
int bcoln = b.ncol();
NumericMatrix out = no_init_matrix(a.nrow(), acoln + bcoln);
for (int j = 0; j < acoln + bcoln; j++) {
if (j < acoln) {
out(_, j) = a(_, j);
} else {
out(_, j) = b(_, j - acoln);
}
}
return out;
}')
set.seed(42)
a <- matrix(rnorm(1e7), 1e3)
b <- matrix(runif(1e7), 1e3)
set.seed(42)
identical(mmult1(a, b), mmult1(a, b))
require(Rcpp)
cppFunction('NumericMatrix mmult1(NumericMatrix a, NumericMatrix b) {
int arow = a.nrow();
int brow = b.nrow();
NumericMatrix out = no_init_matrix(a.ncol(), arow + brow);
for (int j = 0; j < arow + brow; j++) {
if (j < arow) {
out(_, j) = a(_, j);
} else {
out(_, j) = b(_, j - arow);
}
}
return out;
}')
set.seed(42)
a <- matrix(rnorm(1e7), 1e3)
b <- matrix(runif(1e7), 1e3)
identical(mmult1(a, b), mmult1(a, b))
install.packages("devtools")
install.packages("roxygen2")
